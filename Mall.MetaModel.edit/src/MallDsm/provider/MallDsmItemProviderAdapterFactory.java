/**
 */
package MallDsm.provider;

import MallDsm.util.MallDsmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MallDsmItemProviderAdapterFactory extends MallDsmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MallDsmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.BrandShop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrandShopItemProvider brandShopItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.BrandShop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrandShopAdapter() {
		if (brandShopItemProvider == null) {
			brandShopItemProvider = new BrandShopItemProvider(this);
		}

		return brandShopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.SpecialisticShop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecialisticShopItemProvider specialisticShopItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.SpecialisticShop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecialisticShopAdapter() {
		if (specialisticShopItemProvider == null) {
			specialisticShopItemProvider = new SpecialisticShopItemProvider(this);
		}

		return specialisticShopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Brand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrandItemProvider brandItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Brand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrandAdapter() {
		if (brandItemProvider == null) {
			brandItemProvider = new BrandItemProvider(this);
		}

		return brandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Good} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoodItemProvider goodItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Good}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoodAdapter() {
		if (goodItemProvider == null) {
			goodItemProvider = new GoodItemProvider(this);
		}

		return goodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.ItemInStock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemInStockItemProvider itemInStockItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.ItemInStock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemInStockAdapter() {
		if (itemInStockItemProvider == null) {
			itemInStockItemProvider = new ItemInStockItemProvider(this);
		}

		return itemInStockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.ListedGood} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListedGoodItemProvider listedGoodItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.ListedGood}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListedGoodAdapter() {
		if (listedGoodItemProvider == null) {
			listedGoodItemProvider = new ListedGoodItemProvider(this);
		}

		return listedGoodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.SubCatecory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubCatecoryItemProvider subCatecoryItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.SubCatecory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubCatecoryAdapter() {
		if (subCatecoryItemProvider == null) {
			subCatecoryItemProvider = new SubCatecoryItemProvider(this);
		}

		return subCatecoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Employee} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmployeeItemProvider employeeItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Employee}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmployeeAdapter() {
		if (employeeItemProvider == null) {
			employeeItemProvider = new EmployeeItemProvider(this);
		}

		return employeeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.TimeSpan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSpanItemProvider timeSpanItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.TimeSpan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSpanAdapter() {
		if (timeSpanItemProvider == null) {
			timeSpanItemProvider = new TimeSpanItemProvider(this);
		}

		return timeSpanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.WeeklySchedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeeklyScheduleItemProvider weeklyScheduleItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.WeeklySchedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeeklyScheduleAdapter() {
		if (weeklyScheduleItemProvider == null) {
			weeklyScheduleItemProvider = new WeeklyScheduleItemProvider(this);
		}

		return weeklyScheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Discount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscountItemProvider discountItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Discount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscountAdapter() {
		if (discountItemProvider == null) {
			discountItemProvider = new DiscountItemProvider(this);
		}

		return discountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Shelf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShelfItemProvider shelfItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Shelf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShelfAdapter() {
		if (shelfItemProvider == null) {
			shelfItemProvider = new ShelfItemProvider(this);
		}

		return shelfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Refrigerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefrigeratorItemProvider refrigeratorItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Refrigerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefrigeratorAdapter() {
		if (refrigeratorItemProvider == null) {
			refrigeratorItemProvider = new RefrigeratorItemProvider(this);
		}

		return refrigeratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MallDsm.Mall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MallItemProvider mallItemProvider;

	/**
	 * This creates an adapter for a {@link MallDsm.Mall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMallAdapter() {
		if (mallItemProvider == null) {
			mallItemProvider = new MallItemProvider(this);
		}

		return mallItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (brandShopItemProvider != null) brandShopItemProvider.dispose();
		if (specialisticShopItemProvider != null) specialisticShopItemProvider.dispose();
		if (brandItemProvider != null) brandItemProvider.dispose();
		if (goodItemProvider != null) goodItemProvider.dispose();
		if (itemInStockItemProvider != null) itemInStockItemProvider.dispose();
		if (listedGoodItemProvider != null) listedGoodItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (subCatecoryItemProvider != null) subCatecoryItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (employeeItemProvider != null) employeeItemProvider.dispose();
		if (timeSpanItemProvider != null) timeSpanItemProvider.dispose();
		if (weeklyScheduleItemProvider != null) weeklyScheduleItemProvider.dispose();
		if (discountItemProvider != null) discountItemProvider.dispose();
		if (shelfItemProvider != null) shelfItemProvider.dispose();
		if (refrigeratorItemProvider != null) refrigeratorItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (mallItemProvider != null) mallItemProvider.dispose();
	}

}
